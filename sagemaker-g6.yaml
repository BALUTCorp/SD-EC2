AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy SageMaker Notebook Instance for Stable Diffusion WebUI with G6 Instance'

Parameters:
  NotebookInstanceName:
    Type: String
    Default: stable-diffusion-g6
    Description: Name for the SageMaker Notebook Instance
    
  InstanceType:
    Type: String
    Default: ml.g6.2xlarge
    AllowedValues:
      - ml.g6.xlarge
      - ml.g6.2xlarge
      - ml.g6.4xlarge
      - ml.g6.8xlarge
      - ml.g6.12xlarge
      - ml.g6.16xlarge
      - ml.g6.24xlarge
      - ml.g6.48xlarge
    Description: SageMaker Notebook Instance type with G6 GPU
    
  VolumeSize:
    Type: Number
    Default: 100
    MinValue: 20
    MaxValue: 500
    Description: Size of the EBS volume in GB (minimum 20GB recommended)

Resources:
  # IAM Role for SageMaker Notebook Instance
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # Lifecycle Configuration for automatic setup
  NotebookInstanceLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub '${NotebookInstanceName}-lifecycle'
      OnStart:
        - Content: !Base64 |
            #!/bin/bash
            set -e
            
            # Update conda and install required packages
            sudo -u ec2-user -i <<'EOF'
            cd /home/ec2-user/SageMaker
            
            # Create installation script
            cat > install_sd.sh << 'INSTALL_EOF'
            #!/bin/bash
            set -e
            
            echo "Installing Stable Diffusion WebUI..."
            
            # Clone repository if not exists
            if [ ! -d "stable-diffusion-webui" ]; then
                git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
                cd stable-diffusion-webui
                
                # Modify requirements to avoid xformers error
                sed -i 's/xformers/#xformers/g' requirements.txt
                
                # Install requirements
                pip install -r requirements.txt
                
                # Install compatible xformers version
                pip install xformers==0.0.23
                
                # Create directory structure
                mkdir -p models/Stable-diffusion
                mkdir -p models/ControlNet
                mkdir -p extensions
                
                # Download ControlNet extension
                cd extensions
                git clone https://github.com/Mikubill/sd-webui-controlnet.git
                cd ..
                
                # Create launch script
                cat > launch_webui.sh << 'LAUNCH_EOF'
            #!/bin/bash
            cd /home/ec2-user/SageMaker/stable-diffusion-webui
            export COMMANDLINE_ARGS="--listen --port 7860 --enable-insecure-extension-access --no-half-vae"
            python launch.py
            LAUNCH_EOF
                
                chmod +x launch_webui.sh
                
                echo "Installation completed!"
            else
                echo "Stable Diffusion WebUI already installed."
            fi
            INSTALL_EOF
            
            chmod +x install_sd.sh
            ./install_sd.sh > install_sd.log 2>&1
            
            # Create auto-start script for Jupyter
            cat > auto_start_webui.ipynb << 'NOTEBOOK_EOF'
            {
             "cells": [
              {
               "cell_type": "markdown",
               "metadata": {},
               "source": [
                "# Stable Diffusion WebUI Auto-Starter\n",
                "\n",
                "This notebook automatically starts the Stable Diffusion WebUI when opened."
               ]
              },
              {
               "cell_type": "code",
               "execution_count": null,
               "metadata": {},
               "outputs": [],
               "source": [
                "import subprocess\n",
                "import os\n",
                "import time\n",
                "import socket\n",
                "from IPython.display import display, HTML\n",
                "\n",
                "def is_port_in_use(port):\n",
                "    \"\"\"Check if port is in use\"\"\"\n",
                "    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n",
                "        return s.connect_ex(('localhost', port)) == 0\n",
                "\n",
                "def start_webui():\n",
                "    \"\"\"Start Stable Diffusion WebUI\"\"\"\n",
                "    webui_dir = \"/home/ec2-user/SageMaker/stable-diffusion-webui\"\n",
                "    port = 7860\n",
                "    \n",
                "    # Check if WebUI is already running\n",
                "    if is_port_in_use(port):\n",
                "        display(HTML(f'''\n",
                "        <div style=\"background-color: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
                "            <h3 style=\"margin-top: 0;\">‚úÖ WebUI is already running!</h3>\n",
                "            <p>Access WebUI at URL: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
                "        </div>\n",
                "        '''))\n",
                "        return\n",
                "    \n",
                "    # Check if launch script exists\n",
                "    launch_script = f\"{webui_dir}/launch_webui.sh\"\n",
                "    if not os.path.exists(launch_script):\n",
                "        display(HTML(f'''\n",
                "        <div style=\"background-color: #f8d7da; color: #721c24; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
                "            <h3 style=\"margin-top: 0;\">‚ùå Error: Launch script not found!</h3>\n",
                "            <p>Please wait for installation to complete or check installation log.</p>\n",
                "        </div>\n",
                "        '''))\n",
                "        return\n",
                "    \n",
                "    # Start WebUI\n",
                "    display(HTML(f'''\n",
                "    <div style=\"background-color: #cce5ff; color: #004085; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
                "        <h3 style=\"margin-top: 0;\">üöÄ Starting WebUI...</h3>\n",
                "        <p>This process may take 2-3 minutes. Please wait.</p>\n",
                "    </div>\n",
                "    '''))\n",
                "    \n",
                "    # Run script in background\n",
                "    process = subprocess.Popen(\n",
                "        [\"bash\", launch_script],\n",
                "        stdout=subprocess.PIPE,\n",
                "        stderr=subprocess.PIPE,\n",
                "        cwd=webui_dir\n",
                "    )\n",
                "    \n",
                "    # Wait for WebUI to start\n",
                "    max_wait = 180  # 3 minutes\n",
                "    start_time = time.time()\n",
                "    \n",
                "    while time.time() - start_time < max_wait:\n",
                "        if is_port_in_use(port):\n",
                "            display(HTML(f'''\n",
                "            <div style=\"background-color: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
                "                <h3 style=\"margin-top: 0;\">‚úÖ WebUI is ready!</h3>\n",
                "                <p>Access WebUI at URL: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
                "            </div>\n",
                "            '''))\n",
                "            return\n",
                "        time.sleep(5)\n",
                "    \n",
                "    # If timeout\n",
                "    display(HTML(f'''\n",
                "    <div style=\"background-color: #f8d7da; color: #721c24; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
                "        <h3 style=\"margin-top: 0;\">‚ö†Ô∏è Startup timeout</h3>\n",
                "        <p>WebUI may still be starting. Please wait longer or check logs.</p>\n",
                "        <p>Try accessing: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
                "    </div>\n",
                "    '''))"
               ]
              },
              {
               "cell_type": "code",
               "execution_count": null,
               "metadata": {},
               "outputs": [],
               "source": [
                "# Start WebUI automatically\n",
                "start_webui()"
               ]
              },
              {
               "cell_type": "markdown",
               "metadata": {},
               "source": [
                "## Inpainting with ControlNet Guide\n",
                "\n",
                "### Step 1: Select Model\n",
                "\n",
                "1. In the WebUI interface, locate the model dropdown\n",
                "2. Select your preferred model\n",
                "\n",
                "### Step 2: Navigate to Inpaint\n",
                "\n",
                "1. Click on the \"img2img\" tab\n",
                "2. Select the \"Inpaint\" sub-tab\n",
                "\n",
                "### Step 3: Configure Prompt\n",
                "\n",
                "1. In the prompt field, write a description for your desired output image\n",
                "2. Example: \"a beautiful landscape with mountains and lake, high quality, detailed\"\n",
                "\n",
                "### Step 4: Upload and Mask Image\n",
                "\n",
                "1. Click \"Upload\" to upload your base image\n",
                "2. Use the brush tool to paint over the areas you want to expand/modify\n",
                "3. Paint along the edges where you want the image to be extended\n",
                "\n",
                "### Step 5: Configure Inpaint Settings\n",
                "\n",
                "1. **Resize mode**: Select \"Resize and fill\"\n",
                "2. **Mask mode**: Select \"Inpaint masked\"\n",
                "3. **Denoising strength**: Adjust the slider (higher values = more changes, lower values = closer to original)\n",
                "\n",
                "### Step 6: Enable ControlNet\n",
                "\n",
                "1. Scroll down to find the \"ControlNet\" section\n",
                "2. Check the \"Enable\" checkbox\n",
                "\n",
                "### Step 7: Configure ControlNet\n",
                "\n",
                "1. **Upload control image**: Click \"Upload independent control image\"\n",
                "2. Upload the same image you used for inpainting (or a different control image)\n",
                "3. **Control type**: Select \"Inpaint\"\n",
                "4. **Control mode**: Select \"ControlNet is more important\"\n",
                "5. **Resize mode**: Select \"Resize and fill\"\n",
                "\n",
                "### Step 8: Generate Image\n",
                "\n",
                "1. Click the \"Generate\" button\n",
                "2. Wait for the processing to complete\n",
                "3. Review the generated result in the output panel"
               ]
              }
             ],
             "metadata": {
              "kernelspec": {
               "display_name": "Python 3",
               "language": "python",
               "name": "python3"
              },
              "language_info": {
               "codemirror_mode": {
                "name": "ipython",
                "version": 3
               },
               "file_extension": ".py",
               "mimetype": "text/x-python",
               "name": "python",
               "nbconvert_exporter": "python",
               "pygments_lexer": "ipython3",
               "version": "3.8.5"
              }
             },
             "nbformat": 4,
             "nbformat_minor": 4
            }
            NOTEBOOK_EOF
            
            # Create auto-start service
            cat > /home/ec2-user/SageMaker/start_webui_service.sh << 'SERVICE_EOF'
            #!/bin/bash
            cd /home/ec2-user/SageMaker/stable-diffusion-webui
            if [ -f "launch_webui.sh" ]; then
                nohup ./launch_webui.sh > webui_service.log 2>&1 &
                echo "WebUI service started"
            else
                echo "WebUI not installed yet"
            fi
            SERVICE_EOF
            
            chmod +x /home/ec2-user/SageMaker/start_webui_service.sh
            
            # Add to crontab to start on reboot
            (crontab -l 2>/dev/null; echo "@reboot /home/ec2-user/SageMaker/start_webui_service.sh") | crontab -
            
            # Start the service now
            /home/ec2-user/SageMaker/start_webui_service.sh
            EOF

  # SageMaker Notebook Instance
  NotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Ref NotebookInstanceName
      InstanceType: !Ref InstanceType
      RoleArn: !GetAtt SageMakerExecutionRole.Arn
      VolumeSizeInGB: !Ref VolumeSize
      LifecycleConfigName: !GetAtt NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
      DirectInternetAccess: Enabled

Outputs:
  NotebookInstanceName:
    Description: Name of the SageMaker Notebook Instance
    Value: !Ref NotebookInstance
    
  JupyterURL:
    Description: URL to access Jupyter Notebook
    Value: !Sub 'https://${NotebookInstance}.notebook.${AWS::Region}.sagemaker.aws/'
    
  WebUIURL:
    Description: URL to access Stable Diffusion WebUI (after installation)
    Value: !Sub 'https://${NotebookInstance}.notebook.${AWS::Region}.sagemaker.aws/proxy/7860/'
    
  ExecutionRole:
    Description: IAM Role ARN for the notebook instance
    Value: !GetAtt SageMakerExecutionRole.Arn
