#!/bin/bash
# Script c√†i ƒë·∫∑t t·ª± ƒë·ªông Stable Diffusion WebUI cho SageMaker
# Ch·∫°y script n√†y trong terminal c·ªßa SageMaker Notebook Instance

set -e

echo "===== B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t Stable Diffusion WebUI ====="

# Th∆∞ m·ª•c l√†m vi·ªác
WORK_DIR="/home/ec2-user/SageMaker"
cd $WORK_DIR

# Ki·ªÉm tra GPU
echo "Ki·ªÉm tra GPU..."
nvidia-smi || { echo "Kh√¥ng t√¨m th·∫•y GPU! Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒëang s·ª≠ d·ª•ng instance c√≥ GPU."; exit 1; }

# Clone repository n·∫øu ch∆∞a t·ªìn t·∫°i
if [ ! -d "stable-diffusion-webui" ]; then
    echo "Cloning Stable Diffusion WebUI repository..."
    git clone https://github.com/AUTOMATIC1111/stable-diffusion-webui.git
else
    echo "Repository ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc clone."
fi

cd stable-diffusion-webui

# S·ª≠a ƒë·ªïi requirements ƒë·ªÉ tr√°nh l·ªói xformers
echo "S·ª≠a ƒë·ªïi requirements.txt..."
sed -i 's/xformers/#xformers/g' requirements.txt

# C√†i ƒë·∫∑t requirements
echo "C√†i ƒë·∫∑t dependencies..."
pip install -r requirements.txt

# C√†i ƒë·∫∑t xformers phi√™n b·∫£n t∆∞∆°ng th√≠ch
echo "C√†i ƒë·∫∑t xformers phi√™n b·∫£n t∆∞∆°ng th√≠ch..."
pip install xformers==0.0.23

# T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
echo "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c..."
mkdir -p models/Stable-diffusion
mkdir -p models/ControlNet
mkdir -p extensions

# C√†i ƒë·∫∑t ControlNet extension
echo "C√†i ƒë·∫∑t ControlNet extension..."
cd extensions
if [ ! -d "sd-webui-controlnet" ]; then
    git clone https://github.com/Mikubill/sd-webui-controlnet.git
else
    echo "ControlNet extension ƒë√£ t·ªìn t·∫°i."
fi
cd ..

# T·∫°o script kh·ªüi ƒë·ªông
echo "T·∫°o script kh·ªüi ƒë·ªông..."
cat > launch_webui.sh << 'EOF'
#!/bin/bash
cd /home/ec2-user/SageMaker/stable-diffusion-webui
export COMMANDLINE_ARGS="--listen --port 7860 --enable-insecure-extension-access --no-half-vae"
python launch.py
EOF

chmod +x launch_webui.sh

# T·∫°o service t·ª± ƒë·ªông kh·ªüi ƒë·ªông
echo "T·∫°o service t·ª± ƒë·ªông kh·ªüi ƒë·ªông..."
cat > $WORK_DIR/start_webui_service.sh << 'EOF'
#!/bin/bash
cd /home/ec2-user/SageMaker/stable-diffusion-webui
nohup ./launch_webui.sh > webui_service.log 2>&1 &
echo "WebUI service started on port 7860"
EOF

chmod +x $WORK_DIR/start_webui_service.sh

# Th√™m v√†o crontab ƒë·ªÉ t·ª± ƒë·ªông kh·ªüi ƒë·ªông khi reboot
echo "C·∫•u h√¨nh t·ª± ƒë·ªông kh·ªüi ƒë·ªông khi reboot..."
(crontab -l 2>/dev/null; echo "@reboot /home/ec2-user/SageMaker/start_webui_service.sh") | crontab -

# T·∫°o notebook t·ª± ƒë·ªông kh·ªüi ƒë·ªông
echo "T·∫°o notebook t·ª± ƒë·ªông kh·ªüi ƒë·ªông..."
cat > $WORK_DIR/auto_start_webui.ipynb << 'EOF'
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Stable Diffusion WebUI Auto-Starter\n",
    "\n",
    "Notebook n√†y t·ª± ƒë·ªông kh·ªüi ƒë·ªông Stable Diffusion WebUI khi ƒë∆∞·ª£c m·ªü."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import subprocess\n",
    "import os\n",
    "import time\n",
    "import socket\n",
    "from IPython.display import display, HTML\n",
    "\n",
    "def is_port_in_use(port):\n",
    "    \"\"\"Ki·ªÉm tra xem port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng\"\"\"\n",
    "    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n",
    "        return s.connect_ex(('localhost', port)) == 0\n",
    "\n",
    "def start_webui():\n",
    "    \"\"\"Kh·ªüi ƒë·ªông Stable Diffusion WebUI\"\"\"\n",
    "    webui_dir = \"/home/ec2-user/SageMaker/stable-diffusion-webui\"\n",
    "    port = 7860\n",
    "    \n",
    "    # Ki·ªÉm tra xem WebUI ƒë√£ ch·∫°y ch∆∞a\n",
    "    if is_port_in_use(port):\n",
    "        display(HTML(f'''\n",
    "        <div style=\"background-color: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
    "            <h3 style=\"margin-top: 0;\">‚úÖ WebUI ƒë√£ ƒëang ch·∫°y!</h3>\n",
    "            <p>Truy c·∫≠p WebUI t·∫°i URL: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
    "        </div>\n",
    "        '''))\n",
    "        return\n",
    "    \n",
    "    # Ki·ªÉm tra xem script kh·ªüi ƒë·ªông c√≥ t·ªìn t·∫°i kh√¥ng\n",
    "    launch_script = f\"{webui_dir}/launch_webui.sh\"\n",
    "    if not os.path.exists(launch_script):\n",
    "        display(HTML(f'''\n",
    "        <div style=\"background-color: #f8d7da; color: #721c24; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
    "            <h3 style=\"margin-top: 0;\">‚ùå L·ªói: Script kh·ªüi ƒë·ªông kh√¥ng t·ªìn t·∫°i!</h3>\n",
    "            <p>Vui l√≤ng ƒë·ª£i qu√° tr√¨nh c√†i ƒë·∫∑t ho√†n t·∫•t ho·∫∑c ki·ªÉm tra log c√†i ƒë·∫∑t.</p>\n",
    "        </div>\n",
    "        '''))\n",
    "        return\n",
    "    \n",
    "    # Kh·ªüi ƒë·ªông WebUI\n",
    "    display(HTML(f'''\n",
    "    <div style=\"background-color: #cce5ff; color: #004085; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
    "        <h3 style=\"margin-top: 0;\">üöÄ ƒêang kh·ªüi ƒë·ªông WebUI...</h3>\n",
    "        <p>Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t 2-3 ph√∫t. Vui l√≤ng ƒë·ª£i.</p>\n",
    "    </div>\n",
    "    '''))\n",
    "    \n",
    "    # Ch·∫°y script trong background\n",
    "    process = subprocess.Popen(\n",
    "        [\"bash\", launch_script],\n",
    "        stdout=subprocess.PIPE,\n",
    "        stderr=subprocess.PIPE,\n",
    "        cwd=webui_dir\n",
    "    )\n",
    "    \n",
    "    # ƒê·ª£i WebUI kh·ªüi ƒë·ªông\n",
    "    max_wait = 180  # 3 ph√∫t\n",
    "    start_time = time.time()\n",
    "    \n",
    "    while time.time() - start_time < max_wait:\n",
    "        if is_port_in_use(port):\n",
    "            display(HTML(f'''\n",
    "            <div style=\"background-color: #d4edda; color: #155724; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
    "                <h3 style=\"margin-top: 0;\">‚úÖ WebUI ƒë√£ s·∫µn s√†ng!</h3>\n",
    "                <p>Truy c·∫≠p WebUI t·∫°i URL: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
    "            </div>\n",
    "            '''))\n",
    "            return\n",
    "        time.sleep(5)\n",
    "    \n",
    "    # N·∫øu qu√° th·ªùi gian m√† v·∫´n ch∆∞a kh·ªüi ƒë·ªông ƒë∆∞·ª£c\n",
    "    display(HTML(f'''\n",
    "    <div style=\"background-color: #f8d7da; color: #721c24; padding: 15px; border-radius: 5px; margin: 10px 0;\">\n",
    "        <h3 style=\"margin-top: 0;\">‚ö†Ô∏è Kh·ªüi ƒë·ªông qu√° th·ªùi gian</h3>\n",
    "        <p>WebUI c√≥ th·ªÉ v·∫´n ƒëang kh·ªüi ƒë·ªông. Vui l√≤ng ƒë·ª£i th√™m ho·∫∑c ki·ªÉm tra log.</p>\n",
    "        <p>Th·ª≠ truy c·∫≠p: <a href=\"/proxy/{port}/\" target=\"_blank\">/proxy/{port}/</a></p>\n",
    "    </div>\n",
    "    '''))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Kh·ªüi ƒë·ªông WebUI t·ª± ƒë·ªông\n",
    "start_webui()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Inpainting v·ªõi ControlNet\n",
    "\n",
    "### B∆∞·ªõc 1: Ch·ªçn model\n",
    "\n",
    "1. Trong giao di·ªán WebUI, t√¨m dropdown model\n",
    "2. Ch·ªçn model b·∫°n mu·ªën s·ª≠ d·ª•ng\n",
    "\n",
    "### B∆∞·ªõc 2: Chuy·ªÉn ƒë·∫øn tab Inpaint\n",
    "\n",
    "1. Click v√†o tab \"img2img\"\n",
    "2. Ch·ªçn sub-tab \"Inpaint\"\n",
    "\n",
    "### B∆∞·ªõc 3: C·∫•u h√¨nh prompt\n",
    "\n",
    "1. Trong tr∆∞·ªùng prompt, vi·∫øt m√¥ t·∫£ cho h√¨nh ·∫£nh ƒë·∫ßu ra mong mu·ªën\n",
    "2. V√≠ d·ª•: \"a beautiful landscape with mountains and lake, high quality, detailed\"\n",
    "\n",
    "### B∆∞·ªõc 4: Upload v√† mask h√¨nh ·∫£nh\n",
    "\n",
    "1. Click \"Upload\" ƒë·ªÉ t·∫£i l√™n h√¨nh ·∫£nh g·ªëc\n",
    "2. S·ª≠ d·ª•ng c√¥ng c·ª• brush ƒë·ªÉ t√¥ l√™n c√°c v√πng b·∫°n mu·ªën m·ªü r·ªông/ch·ªânh s·ª≠a\n",
    "3. T√¥ d·ªçc theo c√°c c·∫°nh n∆°i b·∫°n mu·ªën h√¨nh ·∫£nh ƒë∆∞·ª£c m·ªü r·ªông\n",
    "\n",
    "### B∆∞·ªõc 5: C·∫•u h√¨nh Inpaint\n",
    "\n",
    "1. **Resize mode**: Ch·ªçn \"Resize and fill\"\n",
    "2. **Mask mode**: Ch·ªçn \"Inpaint masked\"\n",
    "3. **Denoising strength**: ƒêi·ªÅu ch·ªânh thanh tr∆∞·ª£t (gi√° tr·ªã cao = nhi·ªÅu thay ƒë·ªïi, gi√° tr·ªã th·∫•p = g·∫ßn v·ªõi b·∫£n g·ªëc)\n",
    "\n",
    "### B∆∞·ªõc 6: B·∫≠t ControlNet\n",
    "\n",
    "1. Cu·ªôn xu·ªëng ƒë·ªÉ t√¨m ph·∫ßn \"ControlNet\"\n",
    "2. ƒê√°nh d·∫•u v√†o √¥ \"Enable\"\n",
    "\n",
    "### B∆∞·ªõc 7: C·∫•u h√¨nh ControlNet\n",
    "\n",
    "1. **Upload control image**: Click \"Upload independent control image\"\n",
    "2. T·∫£i l√™n c√πng h√¨nh ·∫£nh b·∫°n ƒë√£ s·ª≠ d·ª•ng cho inpainting (ho·∫∑c m·ªôt h√¨nh ·∫£nh ƒëi·ªÅu khi·ªÉn kh√°c)\n",
    "3. **Control type**: Ch·ªçn \"Inpaint\"\n",
    "4. **Control mode**: Ch·ªçn \"ControlNet is more important\"\n",
    "5. **Resize mode**: Ch·ªçn \"Resize and fill\"\n",
    "\n",
    "### B∆∞·ªõc 8: T·∫°o h√¨nh ·∫£nh\n",
    "\n",
    "1. Click n√∫t \"Generate\"\n",
    "2. ƒê·ª£i qu√° tr√¨nh x·ª≠ l√Ω ho√†n t·∫•t\n",
    "3. Xem k·∫øt qu·∫£ trong panel output"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF

# Kh·ªüi ƒë·ªông service
echo "Kh·ªüi ƒë·ªông WebUI service..."
$WORK_DIR/start_webui_service.sh

echo "===== C√†i ƒë·∫∑t ho√†n t·∫•t! ====="
echo "WebUI ƒëang kh·ªüi ƒë·ªông tr√™n port 7860."
echo "Truy c·∫≠p WebUI t·∫°i: https://<notebook-name>.notebook.<region>.sagemaker.aws/proxy/7860/"
echo "Ho·∫∑c m·ªü notebook auto_start_webui.ipynb ƒë·ªÉ kh·ªüi ƒë·ªông v√† qu·∫£n l√Ω WebUI."
